#web访问端口设置:8088
server.port = 9020
#session
server.servlet.session.timeout = 600
server.tomcat.uri-encoding = UTF-8
server.max-http-header-size = 80KB
#JPA------------------------------------------------------------------
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.generate-ddl=true
#启用自定义类名生成器
spring.jpa.hibernate.naming.implicit-strategy=org.nina.domain.support.riverNamingStrategy
spring.jpa.hibernate.ddl-auto=update

spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://127.0.0.1:3306/nina?useUnicode=yes&characterEncoding=UTF-8&serverTimezone=GMT%2B8&useSSL=false
spring.datasource.username =root
spring.datasource.password =123456

# Hikari will use the above plus the following to setup connection pooling
#数据源相关配置
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=60000
spring.datasource.hikari.pool-name=DateSourceHikariCP
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1

#日志相关配置
logging.path = /home/jli/git/nina/
logging.file= nina.log

spring.main.allow-bean-definition-overriding=true

#缓存配置
spring.cache.type = redis
#spring.redis.host=
#spring.redis.port=

#batch:设置不需要启动的时候执行任务
spring.batch.job.enabled=false

#自定义配置
aa.bb.cc=abc
xxx.h = hhh
xxx.k = kkk
xxx.m = mmm
#模拟配置用户
xxx.users.a.password = 123
xxx.users.a.age = 18
xxx.users.b.password = 123456
xxx.users.b.age = 48

#security
#通过gitup申请获得OAUTH
#appid
#security.oauth2.client.client-id=b720dcb4f24b7db56ebf
#appkey:通过gitup申请获得
#security.oauth2.client.client-secret=4b2bc3aa89d742373ea8787e7beef60a8e2e1d4b

#获取授权码的服务地址,当用户没有登录，需要将用户导向这个地址去引导用户登录
#访问方式: https://github.com/login/oauth/authorize?client_id=xxxxxxxxxxxxxxxxxx&scope=user,public_repo
#访问上面接口后会github会让其跳转到你预定的url(Authorization callback URL)，并且带上code参数,例如
#http://localhost:8080/callback?code=****************
#security.oauth2.client.user-authorization-uri= https://githup.com/login/oauth/authorize

#请求access-token地址:https://github.com/login/oauth/access_token?client_id=xxxxxx&client_secret=xxxx&code=xxxxxx
#返回信息:access_token=xxxxxxxxxxxxxxxxxxxxxxxxx&scope=public_repo%2 Cuser&token_type=bearer
#security.oauth2.client.access-token-uri=https://githup.com/login/oauth/access_token
#security.oauth2.client.authentication-scheme= query

#拿到access-token后去申请用户openId的地址
#https://api.github.com/user?access_token=xxxxxxxxxxxxxxxxx xxxxxxxx
#这个请求获取的是一个json数据,在网上找了个json串转实体类的工具网,一键生成实体类,妥妥的,网址如下:
#http://www.bejson.com/json2javapojo/new/
#security.oauth2.resource.user-info-uri=https://api.gitup.com/user